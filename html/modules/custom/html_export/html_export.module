<?php

/**
 * @file
 * Html Exort Module.
 */

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Url;
use Drupal\path_alias\Entity\PathAlias;
use Drupal\redirect\Entity\Redirect;
use Drupal\html_export\SimpleHtmlDom;

/**
 * Implements hook_html_export_add_path_provider().
 */
function html_export_html_export_add_path_provider() {
  $items = [
    'core_all_nodes' => [
      'title' => 'Core: All nodes',
      'callback' => '_html_export_all_nodes',
    ],
    'core_all_paths' => [
      'title' => 'Core: all menu paths',
      'callback' => '_html_export_all_menu_links',
    ],
  ];
  // Create an option for each type.
  $avail_types = [
    'faq' => 'faq',
    'static_page' => 'static_page',
  ];
  foreach ($avail_types as $key => $type) {
    $items['types_' . $key] = [
      'title' => 'Node type: ' . $key,
      'callback' => '_html_export_node_type',
      'arg' => $key,
    ];
  }
  return $items;
}

/**
 * Callback for core_all_paths provider.
 */
function _html_export_handle_view($view_name) {
  $paths = [];
  $results = views_get_view_result($view_name);
  // List of nodes from a view.
  foreach ($results as $row) {
    if (isset($row->nid)) {
      $paths['node/' . $row->nid] = 'node/' . $row->nid;
    }
  }
  return $paths;
}

/**
 * Callback for core_all_paths provider.
 */
function _html_export_all_menu_links() {
  $paths = [];
  $query = \Drupal::database()->select('router', 'gs');
  $query->fields('gs', ['pattern_outline']);
  $result = $query->execute()->fetchAll();
  foreach ($result as $val) {
    if (strpos($val->pattern_outline, '%') === FALSE) {
      $paths[$val->pattern_outline] = $val->pattern_outline;
    }
  }
  return $paths;
}

/**
 * Callback for core_all_nodes provider.
 */
function _html_export_all_nodes() {
  $paths = [];
  $result = \Drupal::database()->select('node', 'n')
    ->fields('n', ['nid'])
    ->addTag('node_access')
    ->execute();
  foreach ($result as $val) {
    $paths['node/' . $val->nid] = 'node/' . $val->nid;
  }
  return $paths;
}

/**
 * Callback for core_node_type provider.
 */
function _html_export_node_type($type) {
  $paths = [];
  $result = \Drupal::database()->select('node', 'n')
    ->fields('n', ['nid'])
    ->condition('type', $type)
    ->addTag('node_access')
    ->execute();
  foreach ($result as $val) {
    $paths['node/' . $val->nid] = 'node/' . $val->nid;
  }
  return $paths;
}

/**
 * Helper function to pull in page data.
 */
function _html_export_get_page_data($path, $anonymous, $render_errors) {
  if ($anonymous) {
    $root = \Drupal::request()->getSchemeAndHttpHost() . \Drupal::request()->getBasePath();
    $client = \Drupal::httpClient();
    $request = $client->get($root . $path, ['auth' => ['ocha', 'dev', 'Basic']]);
    $http = $request->getBody()->getContents();
    $error_codes = [403, 404, 500];
    if ($render_errors) {
      $http;
    }
    elseif (!in_array($request->getStatusCode(), $error_codes)) {
      $http;
    }
    else {
      $http = FALSE;
    }
  }
  return $http;
}

/**
 * Render pages.
 */
function html_export_render_pages($paths, $export_path, $dom_remove, $anonymous, $front_found, $render_errors, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($paths);
    $context['results']['paths'] = [];
    $context['results']['asset_list'] = [];
    $context['results']['domains'] = [];
    if ($front_found) {
      $front = \Drupal::request()->getSchemeAndHttpHost() . \Drupal::request()->getBasePath();
      $data = _html_export_get_page_data($front, $anonymous, $render_errors);
      \Drupal::moduleHandler()->alter('html_export_data', $data, $paths, $front, $dom_remove, FALSE);
      if ($file = fopen($export_path . '/index.html', 'w')) {
        fwrite($file, $data);
        fclose($file);
      }
    }
  }
  $new_path = [];
  foreach ($paths as $path) {
    $new_path[] = '/node/' . $path;
  }
  $paths = [];
  $paths = $new_path;
  $count = 0;
  while ($count < 5 && $context['sandbox']['progress'] < $context['sandbox']['max']) {
    $active = $context['sandbox']['progress'];

    $context['message'] = t('Now processing %path', ['%path' => \Drupal::service('path_alias.manager')->getAliasByPath($paths[$active])]);
    // Store some result for post-processing in the finished callback.
    $context['results']['paths'][] = $paths[$active];
    $data = _html_export_get_page_data($paths[$active], $anonymous, $render_errors);
    \Drupal::moduleHandler()->alter('html_export_data', $data, $paths, $paths[$active], $dom_remove);
    $tmp = explode('/', $paths[$active]);
    $folder_path = '';
    foreach ($tmp as $folder) {
      $folder_path .= '/' . $folder;
      $tmppath = $export_path . $folder_path;
      \Drupal::service('file_system')->prepareDirectory($tmppath, FileSystemInterface::CREATE_DIRECTORY);
      \Drupal::service('file_system')->prepareDirectory($tmppath);
    }
    if ($file = fopen($export_path . '/' . $paths[$active] . '/index.html', 'w')) {
      fwrite($file, $data);
      fclose($file);
    }
    $context['sandbox']['progress']++;
    $count++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Export Index page.
 */
function html_export_home_pages($export_path, $dom_remove, $anonymous, $render_errors) {
  if (empty($context['sandbox'])) {
    $front = \Drupal::config('system.site')->get('page.front');
    $data = _html_export_get_page_data($front, $anonymous, $render_errors);
    $front = \Drupal::request()->getSchemeAndHttpHost() . \Drupal::request()->getBasePath();
    \Drupal::moduleHandler()->alter('html_export_data', $data, $paths, $front, $dom_remove, FALSE);
    if ($file = fopen($export_path . '/index.html', 'w')) {
      fwrite($file, $data);
      fclose($file);
    }
  }
}

/**
 * Finished batch process.
 */
function batch_import_finished($success, $results, $operations) {
  $messenger = \Drupal::messenger();
  if ($success) {
    $source = 'sites/default/files/html_export/export/';
    $destination = 'sites/default/files/html_export/html_export.zip';
    gms_ocha_zip($source, $destination);
    $messenger->addMessage(t('<a href=":download">Click here to download export</a>', [':download' => Url::fromRoute('html_export.download_folder')->toString()]));
  }
  else {
    $error_operation = reset($operations);
    $messenger->addMessage(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      )
    );
  }
}

/**
 * Create zip.
 */
function gms_ocha_zip($source, $destination, $include_dir = TRUE) {
  if (file_exists($destination)) {
    unlink($destination);
  }
  $rootPath = realpath($source);
  $zip = new ZipArchive();
  $zip->open($destination, ZipArchive::CREATE | ZipArchive::OVERWRITE);

  $files = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator($rootPath),
    RecursiveIteratorIterator::LEAVES_ONLY
  );
  if ($include_dir) {
    $arr = explode("/", $source);
    $source = "";
    for ($i = 0; $i < count($arr) - 1; $i++) {
      $source .= '/' . $arr[$i];
    }
    $source = substr($source, 1);
  }
  foreach ($files as $file) {
    if (!$file->isDir()) {
      $filePath = $file->getRealPath();
      $relativePath = substr($filePath, strlen($rootPath) + 1);
      $zip->addFile($filePath, $relativePath);
    }
  }
  $zip->close();
  rmdir($source);
}

/**
 * Html data alter.
 */
function html_export_html_export_data_alter(&$data, $paths, $active_path, $dom_remove = [], $remove_base = TRUE) {
  $front = \Drupal::request()->getSchemeAndHttpHost() . \Drupal::request()->getBasePath();
  if ($active_path == $front) {
    $absPathExt = './';
  }
  else {
    $absPathExt = '../../';
  }
  $large_path = getcwd() . '/sites/default/files/html_export/';
  if (!is_dir($large_path)) {
    mkdir($large_path, 0777);
  }
  $large_path .= 'export/';
  if (!is_dir($large_path)) {
    mkdir($large_path, 0777);
  }
  $large_path .= 'assets/';
  $absPath = $absPathExt . 'assets/';
  if (!is_dir($large_path)) {
    mkdir($large_path, 0777);
  }
  $js = $large_path . 'js/';
  $absJs = $absPath . "js/";
  if (!is_dir($js)) {
    mkdir($js, 0777);
  }
  $css = $large_path . 'css/';
  $absCss = $absPath . "css/";
  if (!is_dir($css)) {
    mkdir($css, 0777);
  }
  $images = $large_path . 'images/';
  $absImages = $absPath . "images/";
  if (!is_dir($images)) {
    mkdir($images, 0777);
  }
  // Advanced dom removal routine.
  // Create a DOM object.
  $html_obj = new SimpleHtmlDom();
  // Load HTML from a string.
  $html_obj->load($data);

  if (!empty($dom_remove)) {
    // Remove the selectors.
    foreach ($dom_remove as $find) {
      // Find the selectors in the document.
      $objs = $html_obj->find($find);
      // Account for ability to find multiple objects.
      foreach ($objs as $obj) {
        $obj->outertext = '';
      }
    }
  }
  foreach ($html_obj->find('#block-print-ui-print-links') as $obj) {
    $obj->outertext = '';
  }
  $resources = ['link', 'img', 'script', 'a', 'object'];
  $base_url = \Drupal::request()->getSchemeAndHttpHost() . \Drupal::request()->getBasePath();
  // Repair paths for these resources.
  foreach ($resources as $find) {
    // Find the selectors in the document.
    $objs = $html_obj->find($find);
    // Account for ability to find multiple objects.
    foreach ($objs as $obj) {
      // Account for internal href resources.
      if (isset($obj->href) && (strpos($obj->href, 'http://') === FALSE || strpos($obj->href, 'https://') === FALSE)) {
        $parts = parse_url($obj->href);
        if (isset($parts['path']) && count($parts) == 1) {
          $query = \Drupal::entityQuery('path_alias');
          $query->condition('alias', $parts['path'], '=');
          $aliasIds = $query->execute();
          if (!empty($aliasIds)) {
            $aliasIds = array_values($aliasIds);
            $path = PathAlias::load($aliasIds[0]);
            if (preg_match('/node/i', $path->getPath())) {
              $obj->href = $absPathExt . ltrim($path->getPath(), '/') . '/index.html';
            }
          }
          else {
            $urlPath = ltrim($parts['path'], '/');
            $redirect = \Drupal::entityQuery('redirect')
              ->condition('redirect_source.path', $urlPath)
              ->execute();
            if (!empty($redirect)) {
              $redirect = array_values($redirect);
              $redirect = Redirect::load($redirect[0]);
              if (preg_match('/node/i', $redirect->getRedirect()['uri'])) {
                $nid = $redirect->getRedirectUrl()->getRouteParameters();
                $obj->href = $absPathExt . 'node/' . $nid['node'] . '/index.html';
              }
            }
          }
        }
        elseif (!isset($parts['host'])) {
          $obj->href = urldecode($base_url . $obj->href);
          $url = $obj->href;
          $file_name = urldecode(basename(parse_url($url, PHP_URL_PATH)));
          $ext = pathinfo($file_name, PATHINFO_EXTENSION);
          if ($ext == 'js') {
            $path = $js;
            $absPath = $absJs;
          }
          elseif ($ext == 'css') {
            $path = $css;
            $absPath = $absCss;
          }
          else {
            $path = $images;
            $absPath = $absImages;
          }
          $obj->href = $absPath . $file_name;
          if (!file_exists($path . $file_name)) {
            file_put_contents($path . $file_name, file_get_contents($url));
          }
        }
      }
      // Account for internal src resources.
      if (isset($obj->src) && (strpos($obj->src, 'http://') === FALSE || strpos($obj->src, 'https://') === FALSE)) {
        // Only replace first occurance as this will be base path.
        $parts = parse_url($obj->src);
        if (!isset($parts['host'])) {
          $obj->src = $base_url . $obj->src;
          $url = $obj->src;
          $file_name = urldecode(basename(parse_url($url, PHP_URL_PATH)));
          $ext = pathinfo($file_name, PATHINFO_EXTENSION);
          if ($ext == 'js') {
            $path = $js;
            $absPath = $absJs;
          }
          elseif ($ext == 'css') {
            $path = $css;
            $absPath = $absCss;
          }
          else {
            $path = $images;
            $absPath = $absImages;
          }
          $obj->src = $absPath . $file_name;
          if (!file_exists($path . $file_name)) {
            file_put_contents($path . $file_name, file_get_contents($url));
          }
        }
      }
    }
  }
  // Write all these changes back into the data string.
  $data = $html_obj->save();
  $data = str_replace('/index.html/', '/', $data);
}
