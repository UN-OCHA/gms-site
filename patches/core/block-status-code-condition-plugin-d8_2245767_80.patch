diff --git a/core/modules/block/js/block.es6.js b/core/modules/block/js/block.es6.js
index 2fe26a6dce..5824421604 100644
--- a/core/modules/block/js/block.es6.js
+++ b/core/modules/block/js/block.es6.js
@@ -46,7 +46,7 @@
       }
 
       $(
-        '[data-drupal-selector="edit-visibility-node-type"], [data-drupal-selector="edit-visibility-language"], [data-drupal-selector="edit-visibility-user-role"]',
+        '[data-drupal-selector="edit-visibility-node-type"], [data-drupal-selector="edit-visibility-language"], [data-drupal-selector="edit-visibility-user-role"], [data-drupal-selector="edit-visibility-error-page"]',
       ).drupalSetSummary(checkboxesSummary);
 
       $(
diff --git a/core/modules/block/js/block.js b/core/modules/block/js/block.js
index 9612dfdbf3..e3ccfd38a7 100644
--- a/core/modules/block/js/block.js
+++ b/core/modules/block/js/block.js
@@ -25,7 +25,7 @@
         return vals.join(', ');
       }
 
-      $('[data-drupal-selector="edit-visibility-node-type"], [data-drupal-selector="edit-visibility-language"], [data-drupal-selector="edit-visibility-user-role"]').drupalSetSummary(checkboxesSummary);
+      $('[data-drupal-selector="edit-visibility-node-type"], [data-drupal-selector="edit-visibility-language"], [data-drupal-selector="edit-visibility-user-role"], [data-drupal-selector="edit-visibility-error-page"]').drupalSetSummary(checkboxesSummary);
 
       $('[data-drupal-selector="edit-visibility-request-path"]').drupalSetSummary(function (context) {
         var $pages = $(context).find('textarea[name="visibility[request_path][pages]"]');
@@ -141,4 +141,4 @@
       });
     }
   };
-})(jQuery, window, Drupal);
\ No newline at end of file
+})(jQuery, window, Drupal);
diff --git a/core/modules/block/src/BlockForm.php b/core/modules/block/src/BlockForm.php
index c021c9074a..06d234852c 100644
--- a/core/modules/block/src/BlockForm.php
+++ b/core/modules/block/src/BlockForm.php
@@ -286,6 +286,10 @@ protected function buildVisibilityInterface(array $form, FormStateInterface $for
       $form['language']['negate']['#type'] = 'value';
       $form['language']['negate']['#value'] = $form['language']['negate']['#default_value'];
     }
+    if (isset($form['status_code'])) {
+      $form['status_code']['negate']['#type'] = 'value';
+      $form['status_code']['negate']['#value'] = $form['status_code']['negate']['#default_value'];
+    }
     return $form;
   }
 
diff --git a/core/modules/system/src/Plugin/Condition/ErrorPage.php b/core/modules/system/src/Plugin/Condition/ErrorPage.php
new file mode 100644
index 0000000000..2737352df6
--- /dev/null
+++ b/core/modules/system/src/Plugin/Condition/ErrorPage.php
@@ -0,0 +1,147 @@
+<?php
+
+namespace Drupal\system\Plugin\Condition;
+
+use Drupal\Core\Condition\ConditionPluginBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
+
+/**
+ * Provides an 'Error Pages' condition.
+ *
+ * @Condition(
+ *   id = "error_page",
+ *   label = @Translation("Error Pages"),
+ * )
+ */
+class ErrorPage extends ConditionPluginBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * The request stack.
+   *
+   * @var \Symfony\Component\HttpFoundation\RequestStack
+   */
+  protected $requestStack;
+
+  /**
+   * Constructs a Page not found condition plugin.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin ID for the plugin instance.
+   * @param array $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   *   The request stack.
+   */
+  public function __construct(array $configuration, $plugin_id, array $plugin_definition, RequestStack $request_stack) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->requestStack = $request_stack;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('request_stack')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return ['status_codes' => []] + parent::defaultConfiguration();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $status_codes = [
+      403 => $this->t('Access denied (403)'),
+      404 => $this->t('Page not found (404)'),
+    ];
+    $form['status_codes'] = [
+      '#type' => 'checkboxes',
+      '#title' => $this->t('Show on status code'),
+      '#options' => $status_codes,
+      '#default_value' => $this->configuration['status_codes'],
+      '#description' => $this->t('Select status codes to enforce. If none are selected, all status codes will be allowed.'),
+    ];
+    return parent::buildConfigurationForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
+    // Status codes must be in the 4xx range.
+    $valid_status_codes = array_filter(
+      $form_state->getValue('status_codes'),
+      function ($k) {
+        return filter_var($k, FILTER_VALIDATE_INT, [
+          'options' => [
+            'min_range' => 400,
+            'max_range' => 499,
+          ],
+        ]);
+      }
+    );
+    $form_state->setValue('status_codes', $valid_status_codes);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $this->configuration['status_codes'] = $form_state->getValue('status_codes');
+    parent::submitConfigurationForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function summary() {
+    $config = $this->configuration['status_codes'];
+    $status_codes = [403, 404];
+    $result = empty($config) ? $status_codes : $config;
+    $count = count($result);
+    $codes = implode(', ', $result);
+    if (!empty($this->configuration['negate'])) {
+      return $this->formatPlural($count, 'Do not return true on the following status code: @codes', 'Do not return true on the following status codes: @codes', ['@codes' => $codes]);
+    }
+    return $this->formatPlural($count, 'Return true on the following status code: @codes', 'Return true on the following status codes: @codes', ['@codes' => $codes]);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function evaluate() {
+    $config = $this->configuration['status_codes'];
+    if (empty($config) && !$this->isNegated()) {
+      return TRUE;
+    }
+    $codes = array_combine($config, $config);
+    $exception = $this->requestStack->getCurrentRequest()->attributes->get('exception');
+    return ($exception instanceof HttpExceptionInterface && isset($codes[$exception->getStatusCode()]));
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getCacheContexts() {
+    $contexts = parent::getCacheContexts();
+    $contexts[] = 'url.path';
+    return $contexts;
+  }
+
+}
